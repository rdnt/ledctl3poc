// Code generated by github.com/atombender/go-jsonschema, DO NOT EDIT.

package _registry_old

import "encoding/json"
import "fmt"

// UnmarshalJSON implements json.Unmarshaler.
func (j *FloatOption) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["name"]; !ok || v == nil {
		return fmt.Errorf("field name in FloatOption: required")
	}
	if v, ok := raw["type"]; !ok || v == nil {
		return fmt.Errorf("field type in FloatOption: required")
	}
	type Plain FloatOption
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = FloatOption(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *IntegerOption) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["name"]; !ok || v == nil {
		return fmt.Errorf("field name in IntegerOption: required")
	}
	if v, ok := raw["type"]; !ok || v == nil {
		return fmt.Errorf("field type in IntegerOption: required")
	}
	type Plain IntegerOption
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = IntegerOption(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *ArrayOption) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["items"]; !ok || v == nil {
		return fmt.Errorf("field items in ArrayOption: required")
	}
	if v, ok := raw["name"]; !ok || v == nil {
		return fmt.Errorf("field name in ArrayOption: required")
	}
	if v, ok := raw["type"]; !ok || v == nil {
		return fmt.Errorf("field type in ArrayOption: required")
	}
	type Plain ArrayOption
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = ArrayOption(plain)
	return nil
}

type BooleanOption struct {
	// Default corresponds to the JSON schema field "default".
	Default *bool `json:"default,omitempty"`

	// Name corresponds to the JSON schema field "name".
	Name string `json:"name"`

	// Type corresponds to the JSON schema field "type".
	Type interface{} `json:"type"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *BooleanOption) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["name"]; !ok || v == nil {
		return fmt.Errorf("field name in BooleanOption: required")
	}
	if v, ok := raw["type"]; !ok || v == nil {
		return fmt.Errorf("field type in BooleanOption: required")
	}
	type Plain BooleanOption
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = BooleanOption(plain)
	return nil
}

type FloatOption struct {
	// Default corresponds to the JSON schema field "default".
	Default *float64 `json:"default,omitempty"`

	// Maximum corresponds to the JSON schema field "maximum".
	Maximum *float64 `json:"maximum,omitempty"`

	// Minimum corresponds to the JSON schema field "minimum".
	Minimum *float64 `json:"minimum,omitempty"`

	// Name corresponds to the JSON schema field "name".
	Name string `json:"name"`

	// Type corresponds to the JSON schema field "type".
	Type interface{} `json:"type"`
}

type ArrayOption struct {
	// Items corresponds to the JSON schema field "items".
	Items ArrayOptionItems `json:"items"`

	// Name corresponds to the JSON schema field "name".
	Name string `json:"name"`

	// Type corresponds to the JSON schema field "type".
	Type interface{} `json:"type"`
}

type IntegerOption struct {
	// Default corresponds to the JSON schema field "default".
	Default *int `json:"default,omitempty"`

	// Maximum corresponds to the JSON schema field "maximum".
	Maximum *int `json:"maximum,omitempty"`

	// Minimum corresponds to the JSON schema field "minimum".
	Minimum *int `json:"minimum,omitempty"`

	// Name corresponds to the JSON schema field "name".
	Name string `json:"name"`

	// Type corresponds to the JSON schema field "type".
	Type interface{} `json:"type"`
}

type ArrayOptionItems interface{}

type ObjectOption struct {
	// Name corresponds to the JSON schema field "name".
	Name string `json:"name"`

	// Properties corresponds to the JSON schema field "properties".
	Properties interface{} `json:"properties"`

	// Type corresponds to the JSON schema field "type".
	Type interface{} `json:"type"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *ObjectOption) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["name"]; !ok || v == nil {
		return fmt.Errorf("field name in ObjectOption: required")
	}
	if v, ok := raw["properties"]; !ok || v == nil {
		return fmt.Errorf("field properties in ObjectOption: required")
	}
	if v, ok := raw["type"]; !ok || v == nil {
		return fmt.Errorf("field type in ObjectOption: required")
	}
	type Plain ObjectOption
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = ObjectOption(plain)
	return nil
}

type Option interface{}

type StringOption struct {
	// Default corresponds to the JSON schema field "default".
	Default *string `json:"default,omitempty"`

	// Name corresponds to the JSON schema field "name".
	Name string `json:"name"`

	// Type corresponds to the JSON schema field "type".
	Type interface{} `json:"type"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *StringOption) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["name"]; !ok || v == nil {
		return fmt.Errorf("field name in StringOption: required")
	}
	if v, ok := raw["type"]; !ok || v == nil {
		return fmt.Errorf("field type in StringOption: required")
	}
	type Plain StringOption
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = StringOption(plain)
	return nil
}

type InputSchemaJson map[string]interface{}
