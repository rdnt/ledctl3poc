// Code generated by github.com/atombender/go-jsonschema, DO NOT EDIT.

package led

import "encoding/json"
import "fmt"

type SchemaJsonOutputsElem struct {
	// Count corresponds to the JSON schema field "count".
	Count int `json:"count,omitempty"`

	// Id corresponds to the JSON schema field "id".
	Id *string `json:"id,omitempty"`

	// Offset corresponds to the JSON schema field "offset".
	Offset int `json:"offset,omitempty"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *SchemaJsonOutputsElem) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	type Plain SchemaJsonOutputsElem
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	if v, ok := raw["count"]; !ok || v == nil {
		plain.Count = 1.0
	}
	if v, ok := raw["offset"]; !ok || v == nil {
		plain.Offset = 0.0
	}
	*j = SchemaJsonOutputsElem(plain)
	return nil
}

// display
type SchemaJson struct {
	// Outputs corresponds to the JSON schema field "outputs".
	Outputs []SchemaJsonOutputsElem `json:"outputs"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *SchemaJson) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["outputs"]; !ok || v == nil {
		return fmt.Errorf("field outputs in SchemaJson: required")
	}
	type Plain SchemaJson
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = SchemaJson(plain)
	return nil
}
