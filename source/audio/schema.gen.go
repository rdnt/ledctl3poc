// Code generated by github.com/atombender/go-jsonschema, DO NOT EDIT.

package audio

import "encoding/json"
import "fmt"

type SchemaJsonProfilesElem struct {
	// BlackPoint corresponds to the JSON schema field "blackPoint".
	BlackPoint float64 `json:"blackPoint" yaml:"blackPoint" mapstructure:"blackPoint"`

	// Colors corresponds to the JSON schema field "colors".
	Colors []string `json:"colors" yaml:"colors" mapstructure:"colors"`

	// Id corresponds to the JSON schema field "id".
	Id string `json:"id" yaml:"id" mapstructure:"id"`

	// Name corresponds to the JSON schema field "name".
	Name string `json:"name" yaml:"name" mapstructure:"name"`

	// WindowSize corresponds to the JSON schema field "windowSize".
	WindowSize int `json:"windowSize" yaml:"windowSize" mapstructure:"windowSize"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *SchemaJsonProfilesElem) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["blackPoint"]; !ok || v == nil {
		return fmt.Errorf("field blackPoint in SchemaJsonProfilesElem: required")
	}
	if v, ok := raw["colors"]; !ok || v == nil {
		return fmt.Errorf("field colors in SchemaJsonProfilesElem: required")
	}
	if v, ok := raw["id"]; !ok || v == nil {
		return fmt.Errorf("field id in SchemaJsonProfilesElem: required")
	}
	if v, ok := raw["name"]; !ok || v == nil {
		return fmt.Errorf("field name in SchemaJsonProfilesElem: required")
	}
	if v, ok := raw["windowSize"]; !ok || v == nil {
		return fmt.Errorf("field windowSize in SchemaJsonProfilesElem: required")
	}
	type Plain SchemaJsonProfilesElem
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = SchemaJsonProfilesElem(plain)
	return nil
}

type SchemaJson struct {
	// Profiles corresponds to the JSON schema field "profiles".
	Profiles []SchemaJsonProfilesElem `json:"profiles" yaml:"profiles" mapstructure:"profiles"`

	// SelectedProfile corresponds to the JSON schema field "selectedProfile".
	SelectedProfile string `json:"selectedProfile" yaml:"selectedProfile" mapstructure:"selectedProfile"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *SchemaJson) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["profiles"]; !ok || v == nil {
		return fmt.Errorf("field profiles in SchemaJson: required")
	}
	if v, ok := raw["selectedProfile"]; !ok || v == nil {
		return fmt.Errorf("field selectedProfile in SchemaJson: required")
	}
	type Plain SchemaJson
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = SchemaJson(plain)
	return nil
}
