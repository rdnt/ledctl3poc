// Code generated by github.com/atombender/go-jsonschema, DO NOT EDIT.

package video

import "encoding/json"
import "fmt"

// display
type SchemaJsonDisplaysElem struct {
	// Framerate corresponds to the JSON schema field "framerate".
	Framerate int `json:"framerate"`

	// Height corresponds to the JSON schema field "height".
	Height int `json:"height"`

	// Left corresponds to the JSON schema field "left".
	Left int `json:"left"`

	// Top corresponds to the JSON schema field "top".
	Top int `json:"top"`

	// Width corresponds to the JSON schema field "width".
	Width int `json:"width"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *SchemaJsonDisplaysElem) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	type Plain SchemaJsonDisplaysElem
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	if v, ok := raw["framerate"]; !ok || v == nil {
		plain.Framerate = 60.0
	}
	if v, ok := raw["height"]; !ok || v == nil {
		plain.Height = 1080.0
	}
	if v, ok := raw["left"]; !ok || v == nil {
		plain.Left = 0.0
	}
	if v, ok := raw["top"]; !ok || v == nil {
		plain.Top = 0.0
	}
	if v, ok := raw["width"]; !ok || v == nil {
		plain.Width = 1920.0
	}
	*j = SchemaJsonDisplaysElem(plain)
	return nil
}

type SchemaJson struct {
	// Displays corresponds to the JSON schema field "displays".
	Displays []SchemaJsonDisplaysElem `json:"displays"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *SchemaJson) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["displays"]; !ok || v == nil {
		return fmt.Errorf("field displays in SchemaJson: required")
	}
	type Plain SchemaJson
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = SchemaJson(plain)
	return nil
}
